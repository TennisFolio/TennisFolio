package com.tennisfolio.Tennisfolio.mock;

import com.tennisfolio.Tennisfolio.player.domain.Player;
import com.tennisfolio.Tennisfolio.player.infrastructure.PlayerRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakePlayerRepository implements PlayerRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0L);
    private final List<Player> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Optional<Player> findById(Long id) {
        return data.stream().filter(item -> item.getPlayerId().equals(id)).findAny();
    }

    @Override
    public Optional<Player> findByRapidPlayerId(String rapidPlayerId) {
        return data.stream().filter(item -> item.getRapidPlayerId().equals(rapidPlayerId)).findAny();
    }

    @Override
    public boolean existsByRapidPlayerId(String rapidPlayerId) {
        return data.stream().filter(item -> item.getRapidPlayerId().equals(rapidPlayerId)).findAny().isPresent();
    }

    @Override
    public Player save(Player player) {
        if(player.getPlayerId() == null || player.getPlayerId() == 0L){
            Player newPlayer = Player.builder()
                    .playerId(autoGeneratedId.incrementAndGet())
                    .rapidPlayerId(player.getRapidPlayerId())
                    .playerName(player.getPlayerName())
                    .plays(player.getPlays())
                    .birth(player.getBirth())
                    .country(player.getCountry())
                    .height(player.getHeight())
                    .image(player.getImage())
                    .weight(player.getWeight())
                    .prize(player.getPrize())
                    .turnedPro(player.getTurnedPro())
                    .build();
            data.add(newPlayer);
            return newPlayer;
        }else{
            data.removeIf(item -> Objects.equals(item.getPlayerId(), player.getPlayerId()));
            data.add(player);
        }

        return player;
    }

    @Override
    public List<Player> saveAll(List<Player> players) {
        List<Player> newPlayerList = players.stream().map(player -> {
            if (player.getPlayerId() == null || player.getPlayerId() == 0L) {
                Player newPlayer = Player.builder()
                        .playerId(autoGeneratedId.incrementAndGet())
                        .rapidPlayerId(player.getRapidPlayerId())
                        .playerName(player.getPlayerName())
                        .plays(player.getPlays())
                        .birth(player.getBirth())
                        .country(player.getCountry())
                        .height(player.getHeight())
                        .image(player.getImage())
                        .weight(player.getWeight())
                        .prize(player.getPrize())
                        .turnedPro(player.getTurnedPro())
                        .build();
                data.add(newPlayer);
                return newPlayer;
            } else {
                data.removeIf(item -> Objects.equals(item.getPlayerId(), player.getPlayerId()));
                data.add(player);
                return player;
            }

        }).toList();

        return newPlayerList;
    }
}
